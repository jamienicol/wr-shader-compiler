#version 300 es
precision highp sampler2DArray;
uniform mat4 uTransform;
in vec3 aPosition;
uniform sampler2DArray sColor0;
uniform highp sampler2D sGpuCache;
flat out highp vec4 vTransformBounds;
uniform highp sampler2D sTransformPalette;
in highp ivec2 aTransformIds;
in highp ivec4 aClipDataResourceAddress;
in vec4 aClipDeviceArea;
in vec4 aClipOrigins;
in float aDevicePixelScale;
out highp vec4 vLocalPos;
out highp vec2 vUv;
flat out lowp vec4 vUvBounds;
flat out highp float vLayer;
flat out highp vec4 vEdge;
flat out lowp vec4 vUvBounds_NoClamp;
flat out highp float vClipMode;
void main ()
{
  highp float tmpvar_1;
  highp float tmpvar_2;
  highp int tmpvar_3;
  highp int tmpvar_4;
  highp mat4 tmpvar_5;
  highp mat4 tmpvar_6;
  highp int tmpvar_7;
  tmpvar_7 = (aTransformIds.x & 16777215);
  highp ivec2 tmpvar_8;
  tmpvar_8.x = int((8u * (uint(mod (
    uint(tmpvar_7)
  , 128u)))));
  tmpvar_8.y = int((uint(tmpvar_7) / 128u));
  tmpvar_5[0] = texelFetch (sTransformPalette, tmpvar_8, 0);
  tmpvar_5[1] = texelFetch (sTransformPalette, (tmpvar_8 + ivec2(1, 0)), 0);
  tmpvar_5[2] = texelFetch (sTransformPalette, (tmpvar_8 + ivec2(2, 0)), 0);
  tmpvar_5[3] = texelFetch (sTransformPalette, (tmpvar_8 + ivec2(3, 0)), 0);
  tmpvar_6[0] = texelFetch (sTransformPalette, (tmpvar_8 + ivec2(4, 0)), 0);
  tmpvar_6[1] = texelFetch (sTransformPalette, (tmpvar_8 + ivec2(5, 0)), 0);
  tmpvar_6[2] = texelFetch (sTransformPalette, (tmpvar_8 + ivec2(6, 0)), 0);
  tmpvar_6[3] = texelFetch (sTransformPalette, (tmpvar_8 + ivec2(7, 0)), 0);
  highp mat4 tmpvar_9;
  highp int tmpvar_10;
  tmpvar_10 = (aTransformIds.y & 16777215);
  highp ivec2 tmpvar_11;
  tmpvar_11.x = int((8u * (uint(mod (
    uint(tmpvar_10)
  , 128u)))));
  tmpvar_11.y = int((uint(tmpvar_10) / 128u));
  tmpvar_9[0] = texelFetch (sTransformPalette, tmpvar_11, 0);
  tmpvar_9[1] = texelFetch (sTransformPalette, (tmpvar_11 + ivec2(1, 0)), 0);
  tmpvar_9[2] = texelFetch (sTransformPalette, (tmpvar_11 + ivec2(2, 0)), 0);
  tmpvar_9[3] = texelFetch (sTransformPalette, (tmpvar_11 + ivec2(3, 0)), 0);
  highp vec2 tmpvar_12;
  highp vec4 tmpvar_13;
  highp vec4 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_13 = texelFetch (sGpuCache, aClipDataResourceAddress.xy, 0);
  tmpvar_14 = texelFetch (sGpuCache, (aClipDataResourceAddress.xy + ivec2(1, 0)), 0);
  tmpvar_15 = texelFetch (sGpuCache, (aClipDataResourceAddress.xy + ivec2(2, 0)), 0);
  tmpvar_12 = tmpvar_15.xy;
  tmpvar_2 = tmpvar_13.z;
  tmpvar_3 = int(tmpvar_14.x);
  tmpvar_4 = int(tmpvar_14.y);
  highp vec2 tmpvar_16;
  highp vec2 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = texelFetch (sGpuCache, aClipDataResourceAddress.zw, 0);
  tmpvar_16 = tmpvar_18.xy;
  tmpvar_17 = tmpvar_18.zw;
  tmpvar_1 = texelFetch (sGpuCache, (aClipDataResourceAddress.zw + ivec2(1, 0)), 0).x;
  highp vec4 pos_19;
  vec4 tmpvar_20;
  tmpvar_20.zw = vec2(0.0, 1.0);
  tmpvar_20.xy = (((aClipOrigins.zw + aClipDeviceArea.xy) + (aPosition.xy * aClipDeviceArea.zw)) / aDevicePixelScale);
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * tmpvar_20);
  pos_19.w = tmpvar_21.w;
  pos_19.xyz = (tmpvar_21.xyz / tmpvar_21.w);
  highp vec2 pos_22;
  pos_22 = pos_19.xy;
  highp vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_5 * vec4(0.0, 0.0, 0.0, 1.0));
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_24 = tmpvar_6[uint(0)].xyz;
  tmpvar_25 = tmpvar_6[1u].xyz;
  tmpvar_26 = tmpvar_6[2u].xyz;
  highp mat3 tmpvar_27;
  tmpvar_27[0].x = tmpvar_24.x;
  tmpvar_27[1].x = tmpvar_24.y;
  tmpvar_27[2].x = tmpvar_24.z;
  tmpvar_27[0].y = tmpvar_25.x;
  tmpvar_27[1].y = tmpvar_25.y;
  tmpvar_27[2].y = tmpvar_25.z;
  tmpvar_27[0].z = tmpvar_26.x;
  tmpvar_27[1].z = tmpvar_26.y;
  tmpvar_27[2].z = tmpvar_26.z;
  highp vec3 tmpvar_28;
  tmpvar_28.z = -10000.0;
  tmpvar_28.xy = pos_22;
  highp vec3 normal_29;
  normal_29 = (tmpvar_27 * vec3(0.0, 0.0, 1.0));
  highp vec3 pt_30;
  pt_30 = (tmpvar_23.xyz / tmpvar_23.w);
  highp float t_31;
  highp float tmpvar_32;
  tmpvar_32 = abs(normal_29.z);
  if ((tmpvar_32 > 1e-06)) {
    t_31 = (dot ((pt_30 - tmpvar_28), normal_29) / normal_29.z);
  };
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xy = pos_22;
  tmpvar_33.z = (-10000.0 + t_31);
  highp vec4 tmpvar_34;
  tmpvar_34 = ((tmpvar_6 * tmpvar_33) * tmpvar_21.w);
  vec4 tmpvar_35;
  tmpvar_35.zw = vec2(0.0, 1.0);
  tmpvar_35.xy = ((aClipOrigins.xy + aClipDeviceArea.xy) + (aPosition.xy * aClipDeviceArea.zw));
  gl_Position = (uTransform * tmpvar_35);
  highp vec4 tmpvar_36;
  tmpvar_36.xy = tmpvar_12;
  tmpvar_36.zw = (tmpvar_15.xy + tmpvar_15.zw);
  vTransformBounds = tmpvar_36;
  vLayer = tmpvar_1;
  vClipMode = tmpvar_2;
  lowp vec2 tmpvar_37;
  tmpvar_37 = vec3(textureSize (sColor0, 0)).xy;
  highp vec2 tmpvar_38;
  tmpvar_38 = (tmpvar_34.xy / tmpvar_34.w);
  vLocalPos = tmpvar_34;
  bool tmpvar_39;
  tmpvar_39 = bool(0);
  bool tmpvar_40;
  tmpvar_40 = bool(0);
  if ((0 == tmpvar_3)) tmpvar_39 = bool(1);
  if (tmpvar_40) tmpvar_39 = bool(0);
  if (tmpvar_39) {
    vEdge.x = 0.5;
    vEdge.z = ((tmpvar_15.z / tmpvar_13.x) - 0.5);
    vUv.x = ((tmpvar_38.x - tmpvar_15.x) / tmpvar_13.x);
    tmpvar_40 = bool(1);
  };
  tmpvar_39 = bool(1);
  if (tmpvar_40) tmpvar_39 = bool(0);
  if (tmpvar_39) {
    vEdge.xz = vec2(1.0, 1.0);
    vUv.x = ((tmpvar_38.x - tmpvar_15.x) / tmpvar_15.z);
    tmpvar_40 = bool(1);
  };
  bool tmpvar_41;
  tmpvar_41 = bool(0);
  bool tmpvar_42;
  tmpvar_42 = bool(0);
  if ((0 == tmpvar_4)) tmpvar_41 = bool(1);
  if (tmpvar_42) tmpvar_41 = bool(0);
  if (tmpvar_41) {
    vEdge.y = 0.5;
    vEdge.w = ((tmpvar_15.w / tmpvar_13.y) - 0.5);
    vUv.y = ((tmpvar_38.y - tmpvar_15.y) / tmpvar_13.y);
    tmpvar_42 = bool(1);
  };
  tmpvar_41 = bool(1);
  if (tmpvar_42) tmpvar_41 = bool(0);
  if (tmpvar_41) {
    vEdge.yw = vec2(1.0, 1.0);
    vUv.y = ((tmpvar_38.y - tmpvar_15.y) / tmpvar_15.w);
    tmpvar_42 = bool(1);
  };
  vUv = (vUv * tmpvar_34.w);
  highp vec4 tmpvar_43;
  tmpvar_43.xy = (tmpvar_18.xy + vec2(0.5, 0.5));
  tmpvar_43.zw = (tmpvar_18.zw - vec2(0.5, 0.5));
  vUvBounds = (tmpvar_43 / tmpvar_37.xyxy);
  highp vec4 tmpvar_44;
  tmpvar_44.xy = tmpvar_16;
  tmpvar_44.zw = tmpvar_17;
  vUvBounds_NoClamp = (tmpvar_44 / tmpvar_37.xyxy);
}

